import javax.swing.JOptionPane;
import javax.swing.JTextField;
import java.awt.EventQueue;
import java.awt.Graphics;
import javax.swing.JFrame;
import javax.swing.JButton;
import javax.swing.JPanel;
import java.awt.Color;
import java.awt.event.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.SwingConstants;

public class MainApp extends JPanel {

  private ComposedShape bigshape;
  private JFrame frame;

  /*
   * Constructor that takes ComposedShape to initialize bigshape.
   * This Constructor used in setup method. 
   * ComposedShape object passed to this constructor with inputs given from GUI to create JPanel (PrintedShape).
   */
  private MainApp(ComposedShape cs1)
  { 
    super();
    bigshape=cs1;
  }

  /**
   * Starts application.
   * MainApp Constructor, it creates all GUI.
   */
  public MainApp()
  {
    super();
    setup();
  }

  @Override
  protected void paintComponent(Graphics g) 
  {
    bigshape.draw(g);
  }

  /**
   * Launch the application.
   * This main function is generated by Windows Builder system
   */
  public static void main(String[] args) {
    EventQueue.invokeLater(new Runnable() {
      public void run() {
        try {
          MainApp window = new MainApp();
          window.frame.setVisible(true);
        } catch (Exception e) {
          e.printStackTrace();
        }
      }
    });
  }
  private void setup(){
    //Create a frame to contain all other GUI elements

    frame = new JFrame();
    frame.setBounds(100, 100, 450, 300);
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.getContentPane().setLayout(null);
    frame.setResizable(false);
  
    //Label above combo box, just immutable plain text
    JLabel containerShapeLabel = new JLabel("Container shape");
    containerShapeLabel.setHorizontalAlignment(SwingConstants.CENTER);
    containerShapeLabel.setBounds(110, 106, 119, 14);
    frame.getContentPane().add(containerShapeLabel);
    //Label above combo box, just immutable plain text
    JLabel lblInnerShape = new JLabel("Inner shape");
    lblInnerShape.setHorizontalAlignment(SwingConstants.CENTER);
    lblInnerShape.setBounds(230, 106, 130, 14);
    frame.getContentPane().add(lblInnerShape);
    
    // Combo box for selecting container shape
    final JComboBox<String> cbContainerShape = new JComboBox<String>();
    cbContainerShape.setSelectedIndex(-1);
    cbContainerShape.setMaximumRowCount(2);
    cbContainerShape.setBounds(110, 127, 100, 20);
    cbContainerShape.addItem("Rectangle"); // Choice 1
    cbContainerShape.addItem("Triangle");  // Choice 2
    frame.getContentPane().add(cbContainerShape);  
    
    // Combo box for selecting inner shape
    final JComboBox<String> cbInnerShape = new JComboBox<String>();
    cbInnerShape.setSelectedIndex(-1);
    cbInnerShape.setMaximumRowCount(3);
    cbInnerShape.setBounds(240, 127, 100, 20);
    cbInnerShape.addItem("Rectangle");
    cbInnerShape.addItem("Triangle");
    cbInnerShape.addItem("Circle");
    frame.getContentPane().add(cbInnerShape); 

    JLabel lbheight = new JLabel("Height");
    lbheight.setBounds(10, 157, 100, 20);
    frame.getContentPane().add(lbheight);

    final JTextField container_height = new JTextField();
    container_height.setBounds(110, 157, 100, 20);
    frame.getContentPane().add(container_height);
    container_height.setColumns(10);
    container_height.setEditable(false);

    JLabel lbwidth = new JLabel("Width");
    lbwidth.setBounds(10, 187, 100, 20);
    frame.getContentPane().add(lbwidth);

    final JTextField container_width = new JTextField();
    container_width.setBounds(110, 187, 100, 20);
    frame.getContentPane().add(container_width);
    container_width.setColumns(10);
    container_width.setEditable(false);

    JLabel lbedge = new JLabel("Triangle Edge");
    lbedge.setBounds(10, 217, 100, 20);
    frame.getContentPane().add(lbedge);

    final JTextField container_tri_edge = new JTextField();
    container_tri_edge.setBounds(110, 217, 100, 20);
    frame.getContentPane().add(container_tri_edge);
    container_tri_edge.setColumns(10);
    container_tri_edge.setEditable(false);

    JLabel lbradius = new JLabel("Radius");
    lbradius.setBounds(10, 247, 100, 20);
    frame.getContentPane().add(lbradius);

    final JTextField container_radius = new JTextField();
    container_radius.setBounds(110, 247, 100, 20);
    frame.getContentPane().add(container_radius);
    container_radius.setColumns(10);
    container_radius.setEditable(false);

    final JTextField inner_height = new JTextField();
    inner_height.setBounds(240, 157, 100, 20);
    frame.getContentPane().add(inner_height);
    inner_height.setColumns(10);
    inner_height.setEditable(false);

    final JTextField inner_width = new JTextField();
    inner_width.setBounds(240, 187, 100, 20);
    frame.getContentPane().add(inner_width);
    inner_width.setColumns(10);
    inner_width.setEditable(false);

    final JTextField inner_tri_edge = new JTextField();
    inner_tri_edge.setBounds(240, 217, 100, 20);
    frame.getContentPane().add(inner_tri_edge);
    inner_tri_edge.setColumns(10);
    inner_tri_edge.setEditable(false);

    final JTextField inner_radius = new JTextField();
    inner_radius.setBounds(240, 247, 100, 20);
    frame.getContentPane().add(inner_radius);
    inner_radius.setColumns(10);
    inner_radius.setEditable(false);

    cbContainerShape.addActionListener(new ActionListener(){

      public void actionPerformed(ActionEvent e){

        if(cbContainerShape.getSelectedItem()=="Rectangle"){
          container_height.setEditable(true);
          container_width.setEditable(true);
          container_tri_edge.setEditable(false);
          container_tri_edge.setText("");
        }
        else if(cbContainerShape.getSelectedItem()=="Triangle"){
          container_height.setEditable(false);
          container_height.setText("");
          container_width.setEditable(false);
          container_width.setText("");
          container_tri_edge.setEditable(true);
        }

      }

    });

    cbInnerShape.addActionListener(new ActionListener(){

      public void actionPerformed(ActionEvent e){

        if(cbInnerShape.getSelectedItem()=="Triangle"){
          inner_height.setEditable(false);
          inner_height.setText("");
          inner_width.setEditable(false);
          inner_width.setText("");
          inner_radius.setEditable(false);
          inner_radius.setText("");
          inner_tri_edge.setEditable(true);
        }
        else if(cbInnerShape.getSelectedItem()=="Rectangle"){
          inner_height.setEditable(true);
          inner_width.setEditable(true);
          inner_radius.setEditable(false);
          inner_radius.setText("");
          inner_tri_edge.setEditable(false);
          inner_tri_edge.setText("");
        }
        else if(cbInnerShape.getSelectedItem()=="Circle"){
          inner_height.setEditable(false);
          inner_height.setText("");
          inner_width.setEditable(false);
          inner_width.setText("");
          inner_radius.setEditable(true);
          inner_tri_edge.setEditable(false);
          inner_tri_edge.setText("");
        }

      }

    });

    JButton btnExit = new JButton("Exit");
    btnExit.addMouseListener(new MouseAdapter(){
      @Override
      public void mouseClicked(MouseEvent arg0){

        System.exit(0);
      }
    });
    btnExit.setBounds(364, 257, 75, 23);
    frame.getContentPane().add(btnExit);

    // Help button to send information message to user
    JButton btnHelp = new JButton("Help");
    btnHelp.addMouseListener(new MouseAdapter(){
      @Override
      public void mouseClicked(MouseEvent arg0){

        JOptionPane.showMessageDialog(
              null, 
              "This program fits shape(Rectangle,Triangle,Circle) by given inputs\nInitially, TextFileds are not editable, user must select shapes to edit values.\nCircle for Container is not available for now. \nAfter clicking Draw button,output will generated.", 
              "Help",
              JOptionPane.INFORMATION_MESSAGE); 
      }
    });
    btnHelp.setBounds(364, 157, 75, 23);
    frame.getContentPane().add(btnHelp);

    JButton btnDraw = new JButton("Draw");
    btnDraw.addMouseListener(new MouseAdapter() {
      @Override
      public void mouseClicked(MouseEvent arg0) {

        try{ // can throw NumberFormatException ()
            // when user enters invalid shape value...
          // get the current selection of shapes
          if(cbContainerShape.getSelectedItem()=="Rectangle")
          {
              double c_height,c_width;
              c_height = Double.parseDouble(container_height.getText());
              c_width = Double.parseDouble(container_width.getText());
              Rectangle ref1 = new Rectangle(c_height,c_width);

            if(cbInnerShape.getSelectedItem()=="Rectangle")
            {

              double s_height,s_width;
              s_height = Double.parseDouble(inner_height.getText());
              s_width = Double.parseDouble(inner_width.getText());

              // create ComposedShape object
              Rectangle ref2 = new Rectangle(s_height,s_width);
              ComposedShape rr1 = new ComposedShape(ref1,ref2);
              rr1.optimalFit();

              // Storing the ComposedShape object inside this class by this constructor.
              MainApp panel = new MainApp(rr1);
              JFrame frame2 = new JFrame("ComposedShape Output");
              frame2.add(panel);

              frame2.setBounds(100,100,(int)c_width+100,(int)c_height+100);
              frame2.setVisible(true);
              frame2.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            }

            else if(cbInnerShape.getSelectedItem()=="Circle")
            {

              double s_radius;
              s_radius = Double.parseDouble(inner_radius.getText());
              
              Circle cref1 = new Circle(s_radius);
              ComposedShape rc1 = new ComposedShape(ref1,cref1);
              rc1.optimalFit();

              MainApp panel = new MainApp(rc1);
              JFrame frame2 = new JFrame("ComposedShape Output");
              frame2.add(panel);

              frame2.setBounds(100,100,(int)c_width+100,(int)c_height+100);
              frame2.setVisible(true);
              frame2.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

            }

            else if(cbInnerShape.getSelectedItem()=="Triangle")
            {

              double s_tri_edge;
              s_tri_edge = Double.parseDouble(inner_tri_edge.getText());

              Triangle tref1 = new Triangle(s_tri_edge);
              ComposedShape rt1 = new ComposedShape(ref1,tref1);
              rt1.optimalFit();

              MainApp panel = new MainApp(rt1);
              JFrame frame2 = new JFrame("ComposedShape Output");
              frame2.add(panel);

              frame2.setBounds(100,100,(int)c_width+100,(int)c_height+100);
              frame2.setVisible(true);
              frame2.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

            }

          }
          if(cbContainerShape.getSelectedItem()=="Triangle")
          {
              double c_tri_edge;
              c_tri_edge = Double.parseDouble(container_tri_edge.getText());
              Triangle ref1 = new Triangle(c_tri_edge);

            if(cbInnerShape.getSelectedItem()=="Rectangle")
            {

              double s_height,s_width;
              s_height = Double.parseDouble(inner_height.getText());
              s_width = Double.parseDouble(inner_width.getText());

              Rectangle ref2 = new Rectangle(s_height,s_width);
              ComposedShape tr1 = new ComposedShape(ref1,ref2);
              tr1.optimalFit();

              MainApp panel = new MainApp(tr1);
              JFrame frame2 = new JFrame("ComposedShape Output");
              frame2.add(panel);

              frame2.setSize((int)c_tri_edge+100, (int)c_tri_edge+100);
              frame2.setVisible(true);
              frame2.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

            }
            else if(cbInnerShape.getSelectedItem()=="Triangle")
            {

              double s_tri_edge;
              s_tri_edge = Double.parseDouble(inner_tri_edge.getText());

              Triangle tref1 = new Triangle(s_tri_edge);
              ComposedShape tt1 = new ComposedShape(ref1,tref1);
              tt1.optimalFit();

              MainApp panel = new MainApp(tt1);
              JFrame frame2 = new JFrame("ComposedShape Output");
              frame2.add(panel);

              frame2.setSize((int)c_tri_edge+100, (int)c_tri_edge+100);
              frame2.setVisible(true);
              frame2.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

            }
            else if(cbInnerShape.getSelectedItem()=="Circle")
            {

              double s_radius;
              s_radius = Double.parseDouble(inner_radius.getText());
              
              Circle cref1 = new Circle(s_radius);
              ComposedShape tc1 = new ComposedShape(ref1,cref1);
              tc1.optimalFit();

              MainApp panel = new MainApp(tc1);
              JFrame frame2 = new JFrame("ComposedShape Output");
              frame2.add(panel);

              frame2.setSize((int)c_tri_edge+100, (int)c_tri_edge+100);
              frame2.setVisible(true);
              frame2.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

            }
          }
        }
        catch(NumberFormatException e){
          String error_msg = e.getMessage();
          JOptionPane.showMessageDialog(null, "Invalid input for shape values.\nInputs must be an positive number.\nError : "+error_msg, "Invalid TextField Input", JOptionPane.ERROR_MESSAGE);
        }
      }
    });
    btnDraw.setBounds(364, 227, 75, 23);
    frame.getContentPane().add(btnDraw); 

    frame.setVisible(true);
    
  }
}